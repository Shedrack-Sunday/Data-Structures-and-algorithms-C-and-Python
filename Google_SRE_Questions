##1. Sorting a 100GB file with 1GB of memory:

To sort a 100GB file efficiently with limited memory, you can employ an external sorting algorithm like Merge Sort. Here's a basic outline:

Divide: Break down the 100GB file into smaller chunks (e.g., 1GB each).
Sort: Use an in-memory sorting algorithm (like QuickSort or MergeSort) to sort each chunk independently.
Merge: Combine the sorted chunks in a pairwise manner, writing the merged results back to disk. Repeat this process until a single sorted file is obtained.
2. Favorite data structure:

My favorite data structure is the hash table due to its exceptional efficiency for search, insertion, and deletion operations. Hash tables use a hash function to map keys to indices within an array, providing average-case time complexity of O(1). This makes them ideal for applications requiring fast lookups, such as dictionaries, databases, and caches.

3. How DNS works:

DNS (Domain Name System) translates human-readable domain names into IP addresses. It operates in a hierarchical manner, involving a series of DNS servers:

Recursive Resolver: The user's computer queries a local DNS resolver.
Authoritative Server: The resolver follows a chain of DNS servers, eventually reaching the authoritative server for the domain.
Response: The authoritative server provides the IP address to the resolver, which then returns it to the user's computer.
4. Can DNS work over TCP:

While DNS primarily uses UDP for its efficiency and speed, it can also work over TCP for more complex queries or when UDP encounters errors. TCP provides reliability and guarantees delivery, making it suitable for larger DNS responses or when error recovery is crucial.

5. How DNS root servers work:

DNS root servers are at the top of the DNS hierarchy. They store the zone files for top-level domains (TLDs) like .com, .org, and .net. When a resolver queries for a domain, it starts at a root server, which provides the IP address of the authoritative server for that TLD.

6. How BGP works:

BGP (Border Gateway Protocol) is used to exchange routing information between networks on the internet. It operates on a policy-based routing system, allowing network operators to control the paths that traffic takes. BGP uses a path attribute system to evaluate routes based on factors like AS path length, origin, and local preference.

7. How TCP works and the 3-way handshake:

TCP (Transmission Control Protocol) is a reliable, connection-oriented protocol that ensures data delivery and error correction. The 3-way handshake is the process of establishing a TCP connection:

SYN: The client sends a SYN packet to the server, requesting a connection.
SYN-ACK: The server responds with a SYN-ACK packet, acknowledging the client's request and initiating a connection.
ACK: The client sends an ACK packet to confirm the connection establishment.
8. TCP session spoofing and prevention:

TCP session spoofing involves an attacker hijacking an existing TCP session by sending forged packets. This can be prevented using techniques like:

IP address filtering: Restrict incoming connections to trusted IP addresses.
TCP sequence number validation: Verify that the sequence numbers in incoming packets are valid.
Session timeouts: Automatically terminate idle sessions to prevent hijacking.
Encryption: Use encryption protocols like TLS to secure communication.



----------------------------
1. How does DNS work?

DNS stands for Domain Name System. It's like the phonebook of the internet.  Here's how it works:   

You type a domain name (like www.google.com) into your browser.
Your browser doesn't understand domain names, it needs an IP address (a series of numbers) to find the website.   
The browser checks its cache (temporary storage) to see if it already knows the IP address for www.google.com.
If not, it sends a request to a DNS server.   
The DNS server looks up the IP address for www.google.com in its database and sends it back to your browser.
Now your browser has the IP address and can connect to the website and show you the content.   
There are multiple DNS servers involved, and the process can involve some back-and-forth communication, but that's the basic idea.   

2. How does HTTP work?

HTTP stands for Hypertext Transfer Protocol. It's the language browsers and web servers use to communicate. Here's a simplified breakdown:   

Once your browser has the IP address from DNS, it opens a connection to the web server using HTTP.   
Your browser sends an HTTP request to the server, specifying what you want to see (e.g., the homepage of [invalid URL removed]).   
The web server receives the request, processes it, and sends back an HTTP response.   
The response contains the content you requested (the HTML code, images, etc. for the [invalid URL removed] homepage).   
Your browser interprets the response and displays the webpage for you.   
3. What happens when you type www.google.com in the browser?

As explained above:

Your browser looks up the IP address for www.google.com using DNS.
Once it has the IP address, it uses HTTP to communicate with the [invalid URL removed] server.   
The browser requests the homepage content.
The [invalid URL removed] server sends the homepage content back using HTTP.
Your browser displays the [invalid URL removed] homepage for you.
4. If a HTTP request fails, does the operating system retry it, or the browser?

Generally, the browser retries a failed HTTP request.  The number of retries and the time between attempts are controlled by the browser settings. Browsers implement retry logic because network issues or server overload can cause temporary failures. Retries can sometimes overcome these issues and successfully retrieve the content.   

The operating system wouldn't typically handle retries for specific HTTP requests to individual websites. It might handle broader network connectivity issues, but wouldn't be directly involved in retrying communication with a particular website

------------------------------------------------

Inode stands for index node. It's a fundamental data structure in a Unix-like file system that stores metadata about a file or directory. This metadata includes information such as:

File type: Whether it's a regular file, directory, symbolic link, etc.
Permissions: Who can access the file (owner, group, others) and what they can do (read, write, execute).
Ownership: The user and group that own the file.
Time stamps: Creation, modification, and access times.
Size: The size of the file in bytes.
Number of blocks: The number of disk blocks allocated to the file.
Data block pointers: Pointers to the data blocks that store the file's contents.
Key Points:

Unique identifier: Each file or directory has a unique inode number within a filesystem.
Metadata storage: Inodes store essential metadata about files, not the actual data.
Data block pointers: Inodes contain pointers to the data blocks that store the file's content.
Filesystem structure: Inodes are organized in a hierarchical structure, with directories containing inodes of their child files and directories.
Example:

Imagine a filesystem with a directory named "Documents". Within this directory, there's a file named "report.txt". The inode for "report.txt" would store information like its file type (regular file), permissions (read-write for the owner), ownership (user "john", group "staff"), size (1000 bytes), and pointers to the data blocks containing the actual text of the report.

In Summary:

Inodes are the building blocks of a file system, providing essential metadata about files and directories. They play a crucial role in organizing and managing files within a filesystem.
